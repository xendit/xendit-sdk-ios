// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Xendit
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
@_exported import Xendit
@objcMembers @objc(XENAuthentication) open class XenditAuthentication : ObjectiveC.NSObject {
  @objc(authenticationID) open var id: Swift.String!
  @objc open var status: Swift.String!
  @objc open var authenticationURL: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc(XENLogLevel) public enum XenditLogLevel : Swift.UInt {
  case verbose
  case info
  case warning
  case error
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objcMembers @objc(XENError) open class XenditError : ObjectiveC.NSObject {
  @objc(errorCode) open var errorCode: Swift.String!
  @objc open var message: Swift.String!
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(XENAuthenticationData) open class AuthenticationData : ObjectiveC.NSObject {
  @objc open var tokenId: Swift.String!
  @objc open var cardCvn: Swift.String!
  @objc open var amount: Foundation.NSNumber!
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(XENCCToken) open class XenditCCToken : ObjectiveC.NSObject {
  @objc(tokenID) open var id: Swift.String!
  @objc open var status: Swift.String!
  @objc open var authenticationId: Swift.String!
  @objc open var authenticationURL: Swift.String?
  @objc open var maskedCardNumber: Swift.String?
  open var should3DS: Swift.Bool?
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(Xendit) open class Xendit : ObjectiveC.NSObject {
  @objc public static var publishableKey: Swift.String?
  @objc public static func createToken(fromViewController: UIKit.UIViewController, cardData: Xendit.CardData!, shouldAuthenticate: Swift.Bool, completion: @escaping (Xendit.XenditCCToken?, Xendit.XenditError?) -> Swift.Void)
  @objc public static func createToken(fromViewController: UIKit.UIViewController, cardData: Xendit.CardData!, completion: @escaping (Xendit.XenditCCToken?, Xendit.XenditError?) -> Swift.Void)
  @objc public static func createAuthentication(fromViewController: UIKit.UIViewController, tokenId: Swift.String, amount: Foundation.NSNumber, cardCVN: Swift.String, completion: @escaping (Xendit.XenditAuthentication?, Xendit.XenditError?) -> Swift.Void)
  @objc public static func createAuthentication(fromViewController: UIKit.UIViewController, tokenId: Swift.String, amount: Foundation.NSNumber, completion: @escaping (Xendit.XenditAuthentication?, Xendit.XenditError?) -> Swift.Void)
  @objc public static func isCardNumberValid(cardNumber: Swift.String) -> Swift.Bool
  @objc public static func isExpiryValid(cardExpirationMonth: Swift.String, cardExpirationYear: Swift.String) -> Swift.Bool
  @objc public static func isCvnValid(creditCardCVN: Swift.String) -> Swift.Bool
  @objc public static func isCvnValidForCardType(creditCardCVN: Swift.String, cardNumber: Swift.String) -> Swift.Bool
  public static func setLogLevel(_ level: Xendit.XenditLogLevel?)
  public static func setLogDNALevel(_ level: Xendit.ISHLogDNALevel?)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(XEN3DSRecommendation) open class Xendit3DSRecommendation : ObjectiveC.NSObject {
  @objc(tokenID) open var tokenId: Swift.String!
  open var should3DS: Swift.Bool!
  @objc override dynamic public init()
  @objc deinit
}
public enum CYBCardTypes {
  case VISA
  case MASTERCARD
  case AMEX
  case DISCOVER
  case JCB
  case VISA_ELECTRON
  case DANKORT
  case MAESTRO
  case UNKNOWN
  public static func == (a: Xendit.CYBCardTypes, b: Xendit.CYBCardTypes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objcMembers @objc(XENCardData) open class CardData : ObjectiveC.NSObject {
  @objc open var cardNumber: Swift.String!
  @objc open var cardExpMonth: Swift.String!
  @objc open var cardExpYear: Swift.String!
  @objc open var cardCvn: Swift.String?
  @objc open var amount: Foundation.NSNumber!
  @objc open var isMultipleUse: Swift.Bool
  @objc override dynamic public init()
  @objc open var maskedNumber: Swift.String {
    @objc get
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @objcMembers open class WebViewConstants : ObjectiveC.NSObject {
  @objc public static var templateHTMLWithAuthenticateURL: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
